name: 'App Build and Release'

on:
  pull_request:
  release:
    types:
      - published

jobs:
  release-app:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          version: 1.0

      - name: install frontend dependencies
        uses: bahmutov/npm-install@v1

      - name: Cache cargo and rust files
        id: rust_cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: 'app_release_cache-${{ matrix.platform }}'

      - name: Set version non Windows
        if: github.event_name == 'pull_request' && matrix.platform != 'windows-latest'
        shell: bash
        run: |
          JSON_FILE="app/src-tauri/tauri.conf.json"
          RAW_TAG="${{ github.event.release.tag_name }}v0.1.0"
          NEW_VERSION="${RAW_TAG#v}"
          echo "Updating version in $JSON_FILE to $NEW_VERSION"
          jq ".version = \"$NEW_VERSION\"" "$JSON_FILE" > $JSON_FILE.temp && mv $JSON_FILE.temp "$JSON_FILE"
          jq -s 'reduce .[] as $item ({}; . * $item)' "$JSON_FILE" "$JSON_FILE.release" > "$JSON_FILE.result"
          mv "$JSON_FILE.result" "$JSON_FILE"
          cat "$JSON_FILE"

      - name: Set version for Windows
        if: github.event_name == 'pull_request' && matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $JSON_FILE = "app/src-tauri/tauri.conf.json"
          $RAG_TAG = "${{ github.event.release.tag_name }}v0.1.0"
          $NEW_VERSION = $RAG_TAG.TrimStart('v')
          Write-Host "Updating version in $JSON_FILE to $NEW_VERSION"
          jq ".version = `"$NEW_VERSION`"" $JSON_FILE | Out-File -FilePath "$JSON_FILE.temp" -Encoding utf8NoBOM
          Move-Item -Path "$JSON_FILE.temp" -Destination $JSON_FILE -Force
          jq -s 'reduce .[] as $item ({}; . * $item)' "$JSON_FILE" "$JSON_FILE.release" | Out-File -FilePath "$JSON_FILE.result" -Encoding utf8NoBOM
          Move-Item -Path "$JSON_FILE.result" -Destination $JSON_FILE -Force
          Get-Content $JSON_FILE

      - name: Build app
        if: github.event_name == 'pull_request'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          projectPath: 'app'
          args: ${{ matrix.args }}

      - name: Build and release app
        if: github.event_name != 'pull_request'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          projectPath: 'app'
          releaseId: ${{ github.event.release.id }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          args: ${{ matrix.args }}
